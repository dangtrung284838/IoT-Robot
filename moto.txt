
//---------------------- Libraries ----------------------
#include <WiFi.h>
#include <PubSubClient.h>
#include <math.h>
#include <NTPClient.h>
#include <WiFiUdp.h>

// Thư viện Fuzzy dùng cho Arduino (các file .h này phải có trong thư viện bạn cài đặt)
// #include <Fuzzy.h>
// #include <FuzzyInput.h>
// #include <FuzzyOutput.h>
// #include <FuzzySet.h>
// #include <FuzzyRule.h>
// #include <FuzzyRuleAntecedent.h>
// #include <FuzzyRuleConsequent.h>




//---------------------- Function Prototypes ----------------------
float readUltrasonicDistance(int trigPin, int echoPin);
int classifyFront(float d);
int classifySide(float d);
void fuzzyControlSystem(float s0, float s45L, float s45R, float s90L, float s90R);
void lyapunovControl(float &u_lyap, float &w_lyap);
void combinedControl(float &v_left_total, float &v_right_total);
void updateKinematics(float dt, float v_left, float v_right);
void moveToDestination();

void publishSensorData();
void connectWiFi();
void reconnectMQTT();
void callback(char* topic, byte* payload, unsigned int length);

//---------------------- Global Variables ----------------------
// Fuzzy* fuzzy = new Fuzzy();

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 0, 60000);

WiFiClient espClient;
PubSubClient client(espClient);

// (Các biến khác về sensor smoothing, MQTT, … nếu cần)

// WiFi & MQTT parameters
const char *ssid = "Dum-a-doo-dum-a-da";
const char *password = "123456789";
const char* mqtt_server = "cougar.rmq.cloudamqp.com";
const int mqtt_port = 1883;
const char* mqtt_user = "ltsogsmj:ltsogsmj";
const char* mqtt_password = "cbLqh_ejY5Bqs7x7EAXSHr3ESaml-O4X";
const char* mqtt_client_id = "ESP32-Motor";

// Pin definitions for motors and ultrasonic sensors
#define MOTOR1_IN1 16    // Left motor forward
#define MOTOR1_IN2 17    // Left motor reverse
#define MOTOR2_IN1 18    // Right motor forward
#define MOTOR2_IN2 19    // Right motor reverse

#define TRIG_FRONT 13     
#define ECHO_FRONT 12
#define TRIG_FRONT_RIGHT 14 
#define ECHO_FRONT_RIGHT 27
#define TRIG_FRONT_LEFT 26  
#define ECHO_FRONT_LEFT 25
#define TRIG_RIGHT 33    
#define ECHO_RIGHT 32
#define TRIG_LEFT 15     
#define ECHO_LEFT 2

// Robot & control parameters
float x = 0, y = 0, theta = 0;         // Current position (cm) & heading (rad)
float x_B = 200, y_B = 0;              // Destination (cm)
const float L = 20.0;                  // Wheel separation (cm)
float theta_B = 0;
const float CORRECTION_FACTOR = 0.97;  // Correction factor for right motor
bool isAutoMode = false;
unsigned long lastNetworkCheck = 0;    // Thời điểm kiểm tra mạng cuối cùng
bool networkLost = false;              // Trạng thái mất mạng

float v_cmd = 0;
float w_cmd = 0;

// Sensor thresholds for classification (cm)
const float front_TH_NEAR = 15.0;
const float front_TH_MEDIUM = 30.0;
const float side_TH_NEAR = 15.0;
const float side_TH_MEDIUM = 25.0;
const float emergency_distance = 10.0; // cm
const float safety_distance = 30.0;    // cm

// Lyapunov & Fuzzy parameters
const float GAMMA = 0.4;
const float K = 1.0;
const float H = 1.0;

const float R = 3.0;              // Bán kính bánh xe (cm)
const float MAX_ANGULAR_VELOCITY = 26.0; // Vận tốc góc tối đa (rad/s)
const int PWM_MIN = 50;           // Giá trị PWM tối thiểu
const int PWM_MAX = 255;

unsigned long long ntpBaseTime = 0; 
unsigned long localBaseTime = 0;

// =================== WIFI & MQTT FUNCTIONS ===================
void connectWiFi() {
  Serial.print("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  WiFi.setSleep(false);
  int retry = 0;
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    retry++;
    if (retry > 20) {
      Serial.println("\nFailed to connect. Restarting...");
      ESP.restart();
    }
  }
  Serial.println("\nWiFi connected!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

void reconnectMQTT() {
  while (!client.connected()) {
    Serial.print("Connecting to MQTT...");
    if (client.connect(mqtt_client_id, mqtt_user, mqtt_password)) {
      Serial.println("Connected to MQTT broker!");
      client.subscribe("dieukhien/#");
    } else {
      Serial.print("Failed, rc=");
      Serial.print(client.state());
      Serial.println(" Retrying in 5 seconds...");
      delay(5000);
    }
  }
}

void publishSensorData() {
  float front = readUltrasonicDistance(TRIG_FRONT, ECHO_FRONT);
  float front_right = readUltrasonicDistance(TRIG_FRONT_RIGHT, ECHO_FRONT_RIGHT);
  float front_left = readUltrasonicDistance(TRIG_FRONT_LEFT, ECHO_FRONT_LEFT);
  float right = readUltrasonicDistance(TRIG_RIGHT, ECHO_RIGHT);
  float left = readUltrasonicDistance(TRIG_LEFT, ECHO_LEFT);

  char buffer[100];
  snprintf(buffer, sizeof(buffer), "front:%.1f,front_right:%.1f,front_left:%.1f,right:%.1f,left:%.1f",
           (front >= 0) ? front : -1,
           (front_right >= 0) ? front_right : -1,
           (front_left >= 0) ? front_left : -1,
           (right >= 0) ? right : -1,
           (left >= 0) ? left : -1);
  client.publish("sensors/distance", buffer);
  Serial.print("Published sensor data: ");
  Serial.println(buffer);
}


int classifyFront(float d) {
  if (d <= front_TH_NEAR) return 3;         // Near
  else if (d <= front_TH_MEDIUM) return 2;    // Medium
  else return 1;                            // Far
}

int classifySide(float d) {
  if (d <= side_TH_NEAR) return 3;          // Near
  else if (d <= side_TH_MEDIUM) return 2;   // Medium
  else return 1;                           // Far
}

// Unit conversion functions
inline float rad2deg(float rad) { return rad * 180.0 / PI; }
inline float deg2rad(float deg) { return deg * PI / 180.0; }




//---------------------- Fuzzy Membership Functions ----------------------
//---------------------- Fuzzy Membership Functions ----------------------
float trapezoidalMF(float x, float a, float b, float c, float d) {
  if (x <= a) return 0.0;
  else if (x < b) return (x - a) / (b - a);
  else if (x <= c) return 1.0;
  else if (x < d) return (d - x) / (d - c);
  else return 0.0;
}

// Các hàm membership cho input (đơn vị: cm)
float near_mf(float x)   { return trapezoidalMF(x, 0, 0, 10, 20); }
float medium_mf(float x) { return trapezoidalMF(x, 15, 20, 32, 37); }
float far_mf(float x)    { return trapezoidalMF(x, 35, 40, 100, 100); }

// Hàm membership cho output (đơn vị: cm/s)
float nega_mf(float v) { return trapezoidalMF(v, -50, -50, -50, 0); } // Nega: [-50, -50, -50, 0]
float posi_mf(float v) { return trapezoidalMF(v, 0, 50, 50, 50); }    // Posi: [0, 50, 50, 50]

//---------------------- Defuzzification (Centroid) ----------------------
float defuzzifyOutput(int nRules, float rule_strength[], bool isNegaLeft[], bool isNegaRight[], 
                      float z_min, float z_max, float step) {
  float numeratorLeft = 0.0, denominatorLeft = 0.0;
  float numeratorRight = 0.0, denominatorRight = 0.0;
  
  for (float z = z_min; z <= z_max; z += step) {
    float aggregatedNegaLeft = 0.0, aggregatedPosiLeft = 0.0;
    float aggregatedNegaRight = 0.0, aggregatedPosiRight = 0.0;
    
    // Tổng hợp membership từ các luật
    for (int i = 0; i < nRules; i++) {
      if (rule_strength[i] > 0) {
        float muNega = nega_mf(z);
        float muPosi = posi_mf(z);
        float clipped = rule_strength[i]; // Cắt membership bằng rule_strength
        
        if (isNegaLeft[i]) {
          aggregatedNegaLeft = max(aggregatedNegaLeft, min(clipped, muNega));
        } else {
          aggregatedPosiLeft = max(aggregatedPosiLeft, min(clipped, muPosi));
        }
        if (isNegaRight[i]) {
          aggregatedNegaRight = max(aggregatedNegaRight, min(clipped, muNega));
        } else {
          aggregatedPosiRight = max(aggregatedPosiRight, min(clipped, muPosi));
        }
      }
    }
    
    float muLeft = max(aggregatedNegaLeft, aggregatedPosiLeft);
    float muRight = max(aggregatedNegaRight, aggregatedPosiRight);
    
    numeratorLeft += z * muLeft;
    denominatorLeft += muLeft;
    numeratorRight += z * muRight;
    denominatorRight += muRight;
  }
  
  float v_left = (denominatorLeft > 0) ? numeratorLeft / denominatorLeft : 0.0;
  float v_right = (denominatorRight > 0) ? numeratorRight / denominatorRight : 0.0;
  return v_left; // Trả về v_left, nhưng hàm này sẽ được gọi riêng cho v_right
}

// Hàm trợ giúp: lấy min của 5 số
float min5(float a, float b, float c, float d, float e) {
  return min(a, min(b, min(c, min(d, e))));
}

//-------------------- Fuzzy Control System --------------------
void fuzzyControlSystem(float s0, float s45L, float s45R, float s90L, float s90R, 
                        float &v_left, float &v_right) {
  const int N_RULES = 47;
  float rule_strength[N_RULES] = {0};
  bool isNegaLeft[N_RULES];  // Luật nào gán nega cho v_left
  bool isNegaRight[N_RULES]; // Luật nào gán nega cho v_right
  
  // Tính membership cho input
  float mu_near0    = near_mf(s0);
  float mu_medium0  = medium_mf(s0);
  float mu_far0     = far_mf(s0);
  float mu_near45L  = near_mf(s45L);
  float mu_medium45L = medium_mf(s45L);
  float mu_far45L   = far_mf(s45L);
  float mu_near45R  = near_mf(s45R);
  float mu_medium45R = medium_mf(s45R);
  float mu_far45R   = far_mf(s45R);
  float mu_near90L  = near_mf(s90L);
  float mu_medium90L = medium_mf(s90L);
  float mu_far90L   = far_mf(s90L);
  float mu_near90R  = near_mf(s90R);
  float mu_medium90R = medium_mf(s90R);
  float mu_far90R   = far_mf(s90R);
  
  float notNear0    = max(mu_medium0, mu_far0);
  float notNear45L  = max(mu_medium45L, mu_far45L);
  float notNear45R  = max(mu_medium45R, mu_far45R);
  float notNear90L  = max(mu_medium90L, mu_far90L);
  float notNear90R  = max(mu_medium90R, mu_far90R);
  
  // // Emergency check: nếu sensor front quá gần, ưu tiên lùi
  // if (s0 < 15.0 && mu_near0 > 0.7) {
  //   v_left = -30.0;  // Lùi nhanh
  //   v_right = -30.0;
  //   Serial.printf("Emergency back in Fuzzy: s0 = %.2f, v_left = %.2f, v_right = %.2f\n", s0, v_left, v_right);
  //   return;
  // }
  
  // 47 luật mờ
  rule_strength[0] = min5(mu_near0, mu_near45L, mu_near45R, mu_near90L, mu_near90R);
  isNegaLeft[0] = true; isNegaRight[0] = true; // Lùi
  
  rule_strength[1] = min5(mu_near0, mu_far45L, mu_far45R, mu_far90L, mu_far90R);
  isNegaLeft[1] = false; isNegaRight[1] = true; // Rẽ phải
  
  rule_strength[2] = min5(mu_near0, mu_medium45L, mu_medium45R, mu_medium90L, mu_medium90R);
  isNegaLeft[2] = false; isNegaRight[2] = true; // Rẽ phải
  
  rule_strength[3] = min5(mu_near0, mu_far45L, mu_far45R, mu_far90L, mu_medium90R);
  isNegaLeft[3] = true; isNegaRight[3] = false; // Rẽ trái
  
  rule_strength[4] = min5(mu_near0, mu_far45L, mu_far45R, mu_medium90L, mu_far90R);
  isNegaLeft[4] = false; isNegaRight[4] = true; // Rẽ phải
  
  rule_strength[5] = min5(mu_near0, mu_far45L, mu_medium45R, mu_far90L, mu_far90R);
  isNegaLeft[5] = true; isNegaRight[5] = false; // Rẽ trái
  
  rule_strength[6] = min5(mu_near0, mu_medium45L, mu_far45R, mu_far90L, mu_far90R);
  isNegaLeft[6] = false; isNegaRight[6] = true; // Rẽ phải
  
  rule_strength[7] = min5(mu_near0, mu_far45L, mu_far45R, mu_medium90L, mu_medium90R);
  isNegaLeft[7] = false; isNegaRight[7] = true; // Rẽ phải
  
  rule_strength[8] = min5(mu_near0, mu_far45L, mu_medium45R, mu_medium90L, mu_far90R);
  isNegaLeft[8] = false; isNegaRight[8] = true; // Rẽ phải
  
  rule_strength[9] = min5(mu_near0, mu_medium45L, mu_medium45R, mu_far90L, mu_far90R);
  isNegaLeft[9] = false; isNegaRight[9] = true; // Rẽ phải
  
  rule_strength[10] = min5(mu_near0, mu_medium45L, mu_far45R, mu_far90L, mu_medium90R);
  isNegaLeft[10] = false; isNegaRight[10] = true; // Rẽ phải
  
  rule_strength[11] = min5(mu_near0, mu_far45L, mu_medium45R, mu_far90L, mu_medium90R);
  isNegaLeft[11] = true; isNegaRight[11] = false; // Rẽ trái
  
  rule_strength[12] = min5(mu_near0, mu_medium45L, mu_far45R, mu_medium90L, mu_far90R);
  isNegaLeft[12] = false; isNegaRight[12] = true; // Rẽ phải
  
  rule_strength[13] = min5(mu_near0, mu_far45L, mu_medium45R, mu_medium90L, mu_medium90R);
  isNegaLeft[13] = true; isNegaRight[13] = false; // Rẽ trái
  
  rule_strength[14] = min5(mu_near0, mu_medium45L, mu_far45R, mu_medium90L, mu_medium90R);
  isNegaLeft[14] = false; isNegaRight[14] = true; // Rẽ phải
  
  rule_strength[15] = min5(mu_near0, mu_medium45L, mu_medium45R, mu_far90L, mu_medium90R);
  isNegaLeft[15] = true; isNegaRight[15] = false; // Rẽ trái
  
  rule_strength[16] = min5(mu_near0, mu_medium45L, mu_medium45R, mu_medium90L, mu_far90R);
  isNegaLeft[16] = false; isNegaRight[16] = true; // Rẽ phải
  
  rule_strength[17] = min5(mu_near0, mu_near45L, notNear45R, mu_near90L, notNear90R);
  isNegaLeft[17] = false; isNegaRight[17] = true; // Rẽ phải
  
  rule_strength[18] = min5(mu_near0, notNear45L, mu_near45R, notNear90L, mu_near90R);
  isNegaLeft[18] = true; isNegaRight[18] = false; // Rẽ trái
  
  rule_strength[19] = min5(mu_near0, mu_near45L, notNear45R, notNear90L, notNear90R);
  isNegaLeft[19] = false; isNegaRight[19] = true; // Rẽ phải
  
  rule_strength[20] = min5(mu_near0, notNear45L, mu_near45R, notNear90L, notNear90R);
  isNegaLeft[20] = true; isNegaRight[20] = false; // Rẽ trái
  
  rule_strength[21] = min5(mu_near0, notNear45L, notNear45R, mu_near90L, notNear90R);
  isNegaLeft[21] = false; isNegaRight[21] = true; // Rẽ phải
  
  rule_strength[22] = min5(mu_near0, notNear45L, notNear45R, notNear90L, mu_near90R);
  isNegaLeft[22] = true; isNegaRight[22] = false; // Rẽ trái
  
  rule_strength[23] = min5(mu_near0, notNear45L, notNear45R, mu_near90L, mu_near90R);
  isNegaLeft[23] = true; isNegaRight[23] = true; // Lùi
  
  rule_strength[24] = min5(mu_near0, mu_near45L, mu_near45R, notNear90L, notNear90R);
  isNegaLeft[24] = true; isNegaRight[24] = true; // Lùi
  
  rule_strength[25] = min5(mu_near0, notNear45L, mu_near45R, mu_near90L, notNear90R);
  isNegaLeft[25] = true; isNegaRight[25] = true; // Lùi
  
  rule_strength[26] = min5(mu_near0, mu_near45L, mu_near45R, mu_near90L, notNear90R);
  isNegaLeft[26] = true; isNegaRight[26] = true; // Lùi
  
  rule_strength[27] = min5(mu_near0, mu_near45L, notNear45R, notNear90L, mu_near90R);
  isNegaLeft[27] = true; isNegaRight[27] = true; // Lùi
  
  rule_strength[28] = min5(mu_near0, mu_near45L, mu_near45R, notNear90L, mu_near90R);
  isNegaLeft[28] = true; isNegaRight[28] = true; // Lùi
  
  rule_strength[29] = min5(mu_near0, mu_near45L, notNear45R, mu_near90L, mu_near90R);
  isNegaLeft[29] = true; isNegaRight[29] = true; // Lùi
  
  rule_strength[30] = min5(mu_near0, notNear45L, mu_near45R, mu_near90L, mu_near90R);
  isNegaLeft[30] = true; isNegaRight[30] = true; // Lùi
  
  rule_strength[31] = min5(notNear0, mu_near45L, mu_near45R, mu_near90L, mu_near90R);
  isNegaLeft[31] = true; isNegaRight[31] = true; // Lùi
  
  rule_strength[32] = min5(notNear0, notNear45L, notNear45R, notNear90L, notNear90R);
  isNegaLeft[32] = false; isNegaRight[32] = false; // Tiến
  
  rule_strength[33] = min5(notNear0, mu_near45L, notNear45R, notNear90L, notNear90R);
  isNegaLeft[33] = false; isNegaRight[33] = true; // Rẽ phải
  
  rule_strength[34] = min5(notNear0, notNear45L, mu_near45R, notNear90L, notNear90R);
  isNegaLeft[34] = true; isNegaRight[34] = false; // Rẽ trái
  
  rule_strength[35] = min5(notNear0, notNear45L, notNear45R, mu_near90L, notNear90R);
  isNegaLeft[35] = false; isNegaRight[35] = true; // Rẽ phải
  
  rule_strength[36] = min5(notNear0, notNear45L, notNear45R, notNear90L, mu_near90R);
  isNegaLeft[36] = true; isNegaRight[36] = false; // Rẽ trái
  
  rule_strength[37] = min5(notNear0, mu_near45L, mu_near45R, notNear90L, notNear90R);
  isNegaLeft[37] = true; isNegaRight[37] = true; // Lùi
  
  rule_strength[38] = min5(notNear0, mu_near45L, notNear45R, mu_near90L, notNear90R);
  isNegaLeft[38] = false; isNegaRight[38] = true; // Rẽ phải
  
  rule_strength[39] = min5(notNear0, mu_near45L, notNear45R, notNear90L, mu_near90R);
  isNegaLeft[39] = true; isNegaRight[39] = true; // Lùi
  
  rule_strength[40] = min5(notNear0, notNear45L, mu_near45R, notNear90L, mu_near90R);
  isNegaLeft[40] = true; isNegaRight[40] = false; // Rẽ trái
  
  rule_strength[41] = min5(notNear0, notNear45L, notNear45R, mu_near90L, mu_near90R);
  isNegaLeft[41] = false; isNegaRight[41] = false; // Tiến
  
  rule_strength[42] = min5(notNear0, notNear45L, mu_near45R, mu_near90L, notNear90R);
  isNegaLeft[42] = true; isNegaRight[42] = true; // Lùi
  
  rule_strength[43] = min5(notNear0, notNear45L, mu_near45R, mu_near90L, mu_near90R);
  isNegaLeft[43] = true; isNegaRight[43] = true; // Lùi
  
  rule_strength[44] = min5(notNear0, mu_near45L, notNear45R, mu_near90L, mu_near90R);
  isNegaLeft[44] = true; isNegaRight[44] = true; // Lùi
  
  rule_strength[45] = min5(notNear0, mu_near45L, mu_near45R, notNear90L, mu_near90R);
  isNegaLeft[45] = true; isNegaRight[45] = true; // Lùi
  
  rule_strength[46] = min5(notNear0, mu_near45L, mu_near45R, mu_near90L, notNear90R);
  isNegaLeft[46] = true; isNegaRight[46] = true; // Lùi
  
  // Tính đầu ra bằng centroid
  float step = 1.0;
  v_left = defuzzifyOutput(N_RULES, rule_strength, isNegaLeft, isNegaRight, -50, 50, step);
  v_right = defuzzifyOutput(N_RULES, rule_strength, isNegaRight, isNegaRight, -50, 50, step); // Lưu ý: Sửa lại để tính riêng v_right
  
  Serial.printf("Fuzzy output: v_left = %.2f, v_right = %.2f\n", v_left, v_right);
}





//---------------------- LYAPUNOV CONTROL FUNCTION ----------------------
void lyapunovControl(float &u_lyap, float &w_lyap) {
  float rho = sqrt(pow(x_B - x, 2) + pow(y_B - y, 2));
  float goal_angle = atan2(y_B - y, x_B - x);
  float alpha = goal_angle - theta;
  while (alpha > PI)  alpha -= 2 * PI;
  while (alpha < -PI) alpha += 2 * PI;
  if (alpha > PI/2)  alpha = PI/2;
  if (alpha < -PI/2) alpha = -PI/2;
  float beta = -alpha - theta;
  
  u_lyap = GAMMA * tanh(rho / 100.0) * cos(alpha);
  float sin_alpha_over_alpha = (fabs(alpha) < 1e-6) ? 1.0 : sin(alpha)/alpha;
  float tanh_rho_over_rho = (fabs(rho) < 1e-6) ? 1.0 : tanh(rho / 100.0) / (rho / 100.0);
  w_lyap = K * alpha + GAMMA * sin_alpha_over_alpha * tanh_rho_over_rho * cos(alpha) * (alpha + H * beta);
  u_lyap *= 100.0; // chuyển đổi thành cm/s
}

//---------------------- COMBINED CONTROL FUNCTION ----------------------
// -------------------- Combined Control --------------------
// Nếu có vật cản (ít nhất 1 sensor báo near) thì sử dụng fuzzyControlSystem()
// Ngược lại, sử dụng điều khiển Lyapunov.
void combinedControl(float &v_left_total, float &v_right_total) {
  float s0    = readUltrasonicDistance(TRIG_FRONT, ECHO_FRONT);
  float s45L  = readUltrasonicDistance(TRIG_FRONT_LEFT, ECHO_FRONT_LEFT);
  float s45R  = readUltrasonicDistance(TRIG_FRONT_RIGHT, ECHO_FRONT_RIGHT);
  float s90L  = readUltrasonicDistance(TRIG_LEFT, ECHO_LEFT);
  float s90R  = readUltrasonicDistance(TRIG_RIGHT, ECHO_RIGHT);
  
  bool obstaclePresent = false;
  if (s0 > 0 && classifyFront(s0) == 3) obstaclePresent = true;
  if (s45L > 0 && classifySide(s45L) == 3) obstaclePresent = true;
  if (s45R > 0 && classifySide(s45R) == 3) obstaclePresent = true;
  if (s90L > 0 && classifySide(s90L) == 3) obstaclePresent = true;
  if (s90R > 0 && classifySide(s90R) == 3) obstaclePresent = true;
  
  if (obstaclePresent) {
    fuzzyControlSystem(s0, s45L, s45R, s90L, s90R, v_left_total, v_right_total);
    client.publish("status/mode", "Fuzzy mode");
  } else {
    float u_lyap, w_lyap;
    lyapunovControl(u_lyap, w_lyap);
    if (w_lyap > 1.0) w_lyap = 1.0;
    if (w_lyap < -1.0) w_lyap = -1.0;
    v_left_total = u_lyap - (w_lyap * L / 2.0);
    v_right_total = u_lyap + (w_lyap * L / 2.0);
    client.publish("status/mode", "Lyapunov mode");
  }
}



//---------------------- UPDATE KINEMATICS FUNCTION ----------------------
void updateKinematics(float dt, float v_left, float v_right) {
  float u = (v_left + v_right) / 2.0;
  float w = (v_right - v_left) / L;
  x += u * cos(theta) * dt;
  y += u * sin(theta) * dt;
  theta += w * dt;
}

// =================== SENSOR FUNCTIONS ===================
float readUltrasonicDistance(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long duration = pulseIn(echoPin, HIGH, 30000);
  if (duration == 0) return 99;
  float distance = duration * 0.034 / 2.0;
  if (distance > 99) distance = 99;
  return distance;
}


//---------------------- MOVE TO DESTINATION FUNCTION ----------------------
void moveToDestination() {
  float rho = sqrt(pow(x_B - x, 2) + pow(y_B - y, 2));
  if (rho < 20.0) {
    Serial.println("Destination too close, no movement needed!");
    return;
  }
  
  Serial.println("Bắt đầu di chuyển tự động đến đích...");
  isAutoMode = true; // Bật chế độ tự động
  unsigned long startTime = millis();
  unsigned long lastUpdate = millis();
  const unsigned long updateInterval = 100; // 100ms
  
  while (rho > 20.0 && isAutoMode) { // Thoát nếu isAutoMode = false
    unsigned long now = millis();
    if (now - lastUpdate < updateInterval) continue;
    lastUpdate = now;
    
    float t = (now - startTime) / 1000.0;

    float goal_angle = atan2(y_B - y, x_B - x);
    float alpha = goal_angle - theta;
    while (alpha > PI) alpha -= 2 * PI;
    while (alpha < -PI) alpha += 2 * PI;
    if (alpha > PI/2) alpha = PI/2;
    if (alpha < -PI/2) alpha = -PI/2;
    
    rho = sqrt(pow(x_B - x, 2) + pow(y_B - y, 2));
    float beta = - alpha - theta;
    
    float v_left_total, v_right_total;
    
    
    // // Emergency check: nếu sensor front quá gần
    // float s_front = readUltrasonicDistance(TRIG_FRONT, ECHO_FRONT);
    // if (s_front > 0 && s_front < emergency_distance) {
    //   ledcWrite(MOTOR1_IN1, 0); ledcWrite(MOTOR1_IN2, 0);
    //   ledcWrite(MOTOR2_IN1, 0); ledcWrite(MOTOR2_IN2, 0);
    //   client.publish("status/turning", "Emergency stop: too close to obstacle!");
    //   Serial.println("Emergency stop: too close to obstacle!");
    //   delay(1000);
    //   v_left_total = -30;
    //   v_right_total = -30;
    // } else {
    combinedControl(v_left_total, v_right_total);
    // }
    

    
    char speedBuf[50];
    snprintf(speedBuf, sizeof(speedBuf), "v_left:%.2f,v_right:%.2f", v_left_total, v_right_total);
    client.publish("status/speed", speedBuf);
    
    float omega_left = v_left_total / R;    // Chuyển cm/s sang rad/s
    float omega_right = v_right_total / R;  // Chuyển cm/s sang rad/s
    int pwmL = map(abs(omega_left), 0, MAX_ANGULAR_VELOCITY, PWM_MIN, PWM_MAX);
    int pwmR = map(abs(omega_right), 0, MAX_ANGULAR_VELOCITY, PWM_MIN, PWM_MAX);

    // Giảm PWM bánh phải để cân bằng (bánh trái yếu hơn)
    pwmR = (int)(pwmR * RIGHT_WHEEL_REDUCTION);
    
    // Giới hạn PWM trong khoảng hợp lệ
    if (pwmL > PWM_MAX) pwmL = PWM_MAX;
    if (pwmL < PWM_MIN) pwmL = 0;
    if (pwmR > PWM_MAX) pwmR = PWM_MAX;
    if (pwmR < PWM_MIN) pwmR = 0;
    
    if (v_left_total > 0) {
      ledcWrite(MOTOR1_IN1, pwmL);
      ledcWrite(MOTOR1_IN2, 0);
    } else if (v_left_total < 0) {
      ledcWrite(MOTOR1_IN1, 0);
      ledcWrite(MOTOR1_IN2, pwmL);
    } else {
      ledcWrite(MOTOR1_IN1, 0);
      ledcWrite(MOTOR1_IN2, 0);
    }
    
    if (v_right_total > 0) {
      ledcWrite(MOTOR2_IN1, pwmR);
      ledcWrite(MOTOR2_IN2, 0);
    } else if (v_right_total < 0) {
      ledcWrite(MOTOR2_IN1, 0);
      ledcWrite(MOTOR2_IN2, pwmR);
    } else {
      ledcWrite(MOTOR2_IN1, 0);
      ledcWrite(MOTOR2_IN2, 0);
    }
    
    float dt = updateInterval / 1000.0;
    updateKinematics(dt, v_left_total, v_right_total);
    
    rho = sqrt(pow(x_B - x, 2) + pow(y_B - y, 2));
    Serial.printf("rho: %.2f, v_left_total: %.2f, v_right_total: %.2f\n", 
                  rho, v_left_total, v_right_total);

    char dataBuf[120];
    snprintf(dataBuf, sizeof(dataBuf), 
             "t:%.3f,dt:%.3f,rho:%.2f,alpha:%.2f,theta:%.2f,v_left:%.2f,v_right:%.2f",
             t, dt, rho, alpha, theta, v_left_total, v_right_total);
    client.publish("status/data", dataBuf);

        

    Serial.println(dataBuf);

    // Kiểm tra MQTT để xử lý lệnh mới
    client.loop(); // Cho phép xử lý tin nhắn MQTT trong vòng lặp
  }
  
  ledcWrite(MOTOR1_IN1, 0); ledcWrite(MOTOR1_IN2, 0);
  ledcWrite(MOTOR2_IN1, 0); ledcWrite(MOTOR2_IN2, 0);
  
  if (isAutoMode) {
    Serial.println("Đã đến đích!");
    x = 0; y = 0; theta = 0;
    Serial.println("Reset vị trí robot: (0,0,0)");
  } else {
    Serial.println("Chế độ tự động bị gián đoạn bởi lệnh thủ công!");
  }
  isAutoMode = false; // Tắt chế độ tự động
}



//---------------------- MQTT CALLBACK ----------------------
void callback(char* topic, byte* payload, unsigned int length) {
  String message;
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  Serial.print("Received message [");
  Serial.print(topic);
  Serial.print("]: ");
  Serial.println(message);

  // Tách lệnh và timestamp
  int commaIndex = message.lastIndexOf(',');
  String command;
  unsigned long long sendTime = 0;
  if (commaIndex != -1) {
    command = message.substring(0, commaIndex);
    String timestampStr = message.substring(commaIndex + 1);
    
    Serial.print("Raw timestamp from app: ");
    Serial.println(timestampStr);
    
    sendTime = atoll(timestampStr.c_str());

    // Tính receiveTime bằng NTP + millis()
    unsigned long currentMillis = millis();
    unsigned long long elapsedMillis = currentMillis - localBaseTime;
    unsigned long long receiveTime = (ntpBaseTime * 1000) + elapsedMillis;

    // In để kiểm tra
    Serial.printf("sendTime: %llu, receiveTime: %llu\n", sendTime, receiveTime);

    // Tính độ trễ
    long long latency = (long long)receiveTime - (long long)sendTime;
    if (latency < 0) {
      Serial.printf("Độ trễ âm (lỗi đồng bộ): %lld ms\n", latency);
    } else {
      Serial.printf("Độ trễ (app -> ESP32): %lld ms\n", latency);
    }

    // Gửi độ trễ về app
    char latencyBuf[20];
    snprintf(latencyBuf, sizeof(latencyBuf), "%lu", (unsigned long)(latency < 0 ? 0 : latency));
    client.publish("status/latency", latencyBuf);
  } else {
    command = message;
  }

  // Xử lý lệnh
  if (command == "tien") {
    v_cmd = 30; w_cmd = 0;
    isAutoMode = false;
    Serial.println("Xe tiến");
  } else if (command == "lui") {
    v_cmd = -30; w_cmd = 0;
    isAutoMode = false;
    Serial.println("Xe lùi");
  } else if (command == "trai") {
    v_cmd = 20; w_cmd = 0.8;
    isAutoMode = false;
    Serial.println("Xe rẽ trái");
  } else if (command == "phai") {
    v_cmd = 20; w_cmd = -0.8;
    isAutoMode = false;
    Serial.println("Xe rẽ phải");
  } else if (command == "dung") {
    v_cmd = 0; w_cmd = 0;
    isAutoMode = false;
    Serial.println("Xe dừng");
  } else if (command.startsWith("distance:")) {
    int distanceIndex = command.indexOf("distance:") + 9;
    int commaIndex = command.indexOf(",");
    int angleIndex = command.indexOf("angle:") + 6;
    if (commaIndex == -1 || angleIndex == -1) {
      Serial.println("Định dạng thông điệp không hợp lệ!");
      return;
    }
    String distanceStr = command.substring(distanceIndex, commaIndex);
    String angleStr = command.substring(angleIndex);
    float distance = distanceStr.toFloat();
    float angle = angleStr.toFloat();
    float angleRad = angle * PI / 180.0;
    x_B = distance * 100.0 * cos(angleRad);
    y_B = distance * 100.0 * sin(angleRad);
    theta_B = angleRad;
    theta = 0;
    Serial.printf("Tọa độ đích mới: (x_B, y_B) = (%.2f, %.2f) cm\n", x_B, y_B);
    moveToDestination();
    return;
  }
}
void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();

  // Initialize motor pins
  pinMode(MOTOR1_IN1, OUTPUT);
  pinMode(MOTOR1_IN2, OUTPUT);
  pinMode(MOTOR2_IN1, OUTPUT);
  pinMode(MOTOR2_IN2, OUTPUT);
  digitalWrite(MOTOR1_IN1, LOW);
  digitalWrite(MOTOR1_IN2, LOW);
  digitalWrite(MOTOR2_IN1, LOW);
  digitalWrite(MOTOR2_IN2, LOW);

  // Initialize ultrasonic sensor pins
  pinMode(TRIG_FRONT, OUTPUT);   pinMode(ECHO_FRONT, INPUT);
  pinMode(TRIG_FRONT_RIGHT, OUTPUT);   pinMode(ECHO_FRONT_RIGHT, INPUT);
  pinMode(TRIG_FRONT_LEFT, OUTPUT);    pinMode(ECHO_FRONT_LEFT, INPUT);
  pinMode(TRIG_RIGHT, OUTPUT);     pinMode(ECHO_RIGHT, INPUT);
  pinMode(TRIG_LEFT, OUTPUT);      pinMode(ECHO_LEFT, INPUT);
  digitalWrite(TRIG_FRONT, LOW);
  digitalWrite(TRIG_FRONT_RIGHT, LOW);
  digitalWrite(TRIG_FRONT_LEFT, LOW);
  digitalWrite(TRIG_RIGHT, LOW);
  digitalWrite(TRIG_LEFT, LOW);

  connectWiFi();
  timeClient.begin();

  // Đồng bộ NTP và millis() khi khởi động
  if (timeClient.update()) {
    ntpBaseTime = (unsigned long long)timeClient.getEpochTime(); // Giây
    localBaseTime = millis(); // Thời gian millis() tại thời điểm đồng bộ (ms)
    Serial.printf("NTP Base Time: %llu s, Local Base Time: %lu ms\n", ntpBaseTime, localBaseTime);
  } else {
    Serial.println("Failed to sync NTP at startup!");
  }

  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  
  // Setup motor PWM channels using ledc on ESP32
  ledcAttach(MOTOR1_IN1, 5000, 8);
  ledcAttach(MOTOR1_IN2, 5000, 8);
  ledcAttach(MOTOR2_IN1, 5000, 8);
  ledcAttach(MOTOR2_IN2, 5000, 8);
  ledcWrite(MOTOR1_IN1, 0);   ledcWrite(MOTOR1_IN2, 0);
  ledcWrite(MOTOR2_IN1, 0);   ledcWrite(MOTOR2_IN2, 0);
}

void loop() {
  unsigned long now = millis();

  // Kiểm tra trạng thái mạng mỗi 500ms (nhanh hơn)
  if (now - lastNetworkCheck > 500) {
    lastNetworkCheck = now;
    
    // Kiểm tra WiFi
    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("WiFi disconnected! Attempting to reconnect...");
      networkLost = true; // Dừng ngay khi mất WiFi
      // connectWiFi();
    }
    // Kiểm tra MQTT
    else if (!client.connected()) {
      Serial.println("MQTT disconnected! Attempting to reconnect...");
      networkLost = true; // Dừng ngay khi mất MQTT
      // reconnectMQTT();
    } else {
      if (networkLost) { // Mạng vừa khôi phục
        Serial.println("Network restored!");
        client.publish("status", "Network restored");
      }
      networkLost = false; // Mạng ổn định
    }

    // Nếu mất mạng và ở chế độ thủ công, dừng robot ngay
    if (networkLost && !isAutoMode) {
      v_cmd = 0; w_cmd = 0; // Đặt vận tốc về 0
      ledcWrite(MOTOR1_IN1, 0); ledcWrite(MOTOR1_IN2, 0);
      ledcWrite(MOTOR2_IN1, 0); ledcWrite(MOTOR2_IN2, 0);
      Serial.println("Network lost! Robot stopped in manual mode.");
    }

    if (networkLost) {
      if (WiFi.status() != WL_CONNECTED) {
        Serial.println("Attempting to reconnect WiFi...");
        connectWiFi();
      }
      else if (!client.connected()) {
        Serial.println("Attempting to reconnect MQTT...");
        reconnectMQTT();
      }
    }
    
  }

  // Điều khiển động cơ trong chế độ thủ công
  if (!isAutoMode) {
    float vL = v_cmd - (w_cmd * L / 2.0);
    float vR = (v_cmd + (w_cmd * L / 2.0)) * CORRECTION_FACTOR;
    int pwmL = map(abs(vL), 0, 50, 0, 255);
    int pwmR = map(abs(vR), 0, 50, 0, 255);

    if (vL > 0) {
      ledcWrite(MOTOR1_IN1, pwmL);
      ledcWrite(MOTOR1_IN2, 0);
    } else if (vL < 0) {
      ledcWrite(MOTOR1_IN1, 0);
      ledcWrite(MOTOR1_IN2, pwmL);
    } else {
      ledcWrite(MOTOR1_IN1, 0);
      ledcWrite(MOTOR1_IN2, 0);
    }

    if (vR > 0) {
      ledcWrite(MOTOR2_IN1, pwmR);
      ledcWrite(MOTOR2_IN2, 0);
    } else if (vR < 0) {
      ledcWrite(MOTOR2_IN1, 0);
      ledcWrite(MOTOR2_IN2, pwmR);
    } else {
      ledcWrite(MOTOR2_IN1, 0);
      ledcWrite(MOTOR2_IN2, 0);
    }
  }

  // Xử lý tin nhắn MQTT nếu còn kết nối
  if (!networkLost) {
    client.loop();
  } 

  // Gửi heartbeat
  static unsigned long lastMsgTime = 0;
  const long heartbeatInterval = 5000;
  if (now - lastMsgTime > heartbeatInterval && !networkLost) {
    lastMsgTime = now;
    Serial.println("Publishing heartbeat...");
    client.publish("status", "ESP32-Motor online");
  }
  
  // Cập nhật dữ liệu cảm biến
  static unsigned long lastSensorTime = 0;
  const long sensorInterval = 500;
  if (now - lastSensorTime > sensorInterval && !networkLost) {
    lastSensorTime = now;
    publishSensorData();
  }
}
